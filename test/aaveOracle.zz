import { ethers } from "hardhat";
import { writeFile } from "fs";
import { Contracts } from "../networks/compoundMainnet.json";
import aaveResults from "../aaveResults.json";
import { address as aaveKeeperAddress, abi as aaveKeeperAbi } from '../external/AssetOracle-aave-usdc-lending.json';

const aaveAbi = require("../external/aave.json");
const ERC20 = require("../external/erc20.json");
const aaveLendingPoolAbi = require('../external/aaveLendingPool.json');

const USDC_MAINNET = "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";

const STRIPS_AAVE_WALLET = "0x21d0fd7c54e4c1A453906A3BcB7598aeE827b292";

const AAVE_BACKUP = "0xF6F7f470df48f737808278d80c24b88752809220";

const abiCoder = ethers.utils.defaultAbiCoder;
const chainId = 421611;
const infuraProvider = new ethers.providers.InfuraProvider(
    {
        chainId,
        name: "arbitrum-rinkeby"
    },
    {
        projectId: process.env.INFURA_PROJECT_ID,
        projectSecret: process.env.INFURA_PROJECT_SECRET
    }
);
const infuraSigner = new ethers.Wallet(
    process.env.ARBITRUM_TESTNET_PRIVATE_KEY as string, infuraProvider);

describe("Aave APY", function() {

    const YEAR_MILLIS = ethers.BigNumber.from(1000).mul(3600).mul(24).mul(365);
    const ONE_d18 = ethers.utils.parseUnits("1", "ether");
    const ZERO = ethers.BigNumber.from("0");
    before(async function() {
        [this.deployer] = await ethers.getSigners();
        this.USDC = new ethers.Contract(USDC_MAINNET, ERC20, this.deployer);
    });

    it("estimate USDC supply APY, Aave", async function() {
        await ethers.provider.send("hardhat_impersonateAccount", [STRIPS_AAVE_WALLET]);
        const stripsAaveSigner = await ethers.getSigner(STRIPS_AAVE_WALLET);
        const addressProvider = new ethers.Contract(Contracts.AaveLendingPoolAddressesProvider,
            aaveAbi["AaveLendingPoolAddressesProvider"],
            this.deployer);
        const lendingPoolAddress = await addressProvider.getLendingPool();
        const aaveLendingPool = new ethers.Contract(lendingPoolAddress,
            aaveLendingPoolAbi["abi"],
            this.deployer);


        const chainLinkAaveUSD = new ethers.Contract(Contracts.ChainLinkAaveUSD,
            aaveAbi["ChainLinkAaveUSD"],
            this.deployer);

        const aaveIncentivesController = new ethers.Contract(Contracts.AaveIncentivesController,
            aaveAbi["IncentivesController"],
            this.deployer);

        const lastResult = aaveResults.at(-1);
        const prevBalance_d18 = lastResult ? ethers.utils.parseUnits(lastResult.balance, 18) : ZERO;
        const prevAaveRewardBalance_d18 = lastResult ? ethers.utils.parseUnits(lastResult.aaveRewardBalance, 18) : ZERO;
        const prevTime = lastResult ? lastResult.time : 0;

        const usdcBeforeWithdrawal = await this.USDC.balanceOf(STRIPS_AAVE_WALLET);

        const tx = await aaveLendingPool
            .connect(stripsAaveSigner)
            .withdraw(this.USDC.address, ethers.constants.MaxUint256, STRIPS_AAVE_WALLET);
        const currentTime = Date.now();
        await tx.wait();

        const usdcAfterWithdrawal = await this.USDC.balanceOf(STRIPS_AAVE_WALLET);
        const currentBalance = usdcAfterWithdrawal.sub(usdcBeforeWithdrawal);
        const currentBalance_d18 = currentBalance.mul(ethers.BigNumber.from(10).pow(12));

        const currentAaveRewardBalance = await aaveIncentivesController.getRewardsBalance([Contracts.aaveAToken],
            STRIPS_AAVE_WALLET);
        const aavePriceData = await chainLinkAaveUSD.latestRoundData();
        const currentAavePrice = aavePriceData.answer;
        const currentAaveRewardProfit_d18 = (currentAaveRewardBalance.sub(prevAaveRewardBalance_d18))
            .mul(currentAavePrice)
            .div(ethers.BigNumber.from(10).pow(8));
        const currentProfit = (currentBalance_d18.sub(prevBalance_d18)).add(currentAaveRewardProfit_d18);
        const profitStr = ethers.utils.formatUnits(currentProfit, 18);
        const balanceStr = ethers.utils.formatUnits(currentBalance_d18, 18);
        const aaveRewardBalanceStr = ethers.utils.formatUnits(currentAaveRewardBalance, 18);
        const priceStr = ethers.utils.formatUnits(currentAavePrice, 8);
        const interval = currentTime - prevTime;
        const apy = interval > 0 && prevBalance_d18.gt(ZERO) ?
            currentProfit.mul(YEAR_MILLIS).mul(ONE_d18).div(interval).div(prevBalance_d18) :
            ZERO;
        const apyStr = ethers.utils.formatUnits(apy, 16);

        aaveResults.push({
            balance: balanceStr,
            aaveRewardBalance: aaveRewardBalanceStr,
            aavePrice: priceStr,
            time: currentTime,
            interval,
            profit: profitStr,
            apy: apyStr
        });
        writeFile("aaveResults.json",
            JSON.stringify(aaveResults),
            err => { if (err) { console.log(err) } });
        // try {
        //     const encodedApy = abiCoder.encode(["int256"], [apy]);
        //     const aaveKeeper = new ethers.Contract(
        //         aaveKeeperAddress, aaveKeeperAbi, infuraSigner);
        //     let tx = await aaveKeeper.performUpkeep(encodedApy);
        //     await tx.wait();
        //     const aaveKeeper2 = new ethers.Contract(
        //         AAVE_BACKUP, aaveKeeperAbi, infuraSigner);
        //     tx = await aaveKeeper2.performUpkeep(encodedApy);
        //     await tx.wait();
        //     console.log("updated Aave keeper");
        // } catch (error) {
        //     console.log(error);
        // }
    });
});

